name: Deploy EchoHub

on:
  push:
    branches:
      - main         # Deploy to production
      - development  # Deploy to staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  deploy:
    name: Deploy to ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment environment
        id: env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "host=${{ secrets.PRODUCTION_HOST }}" >> $GITHUB_OUTPUT
            echo "path=/var/www/echohub/production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "host=${{ secrets.STAGING_HOST }}" >> $GITHUB_OUTPUT
            echo "path=/var/www/echohub/staging" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.env.outputs.host }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            cd ${{ steps.env.outputs.path }}

            # Fix ownership before git operations (including all subdirectories)
            sudo chown -R $USER:$USER .

            # Remove git index lock if it exists
            rm -f .git/index.lock

            # Force remove problematic files that might have permission issues
            git checkout HEAD -- storage/ database/ bootstrap/cache/ 2>/dev/null || true

            # Git pull
            git fetch origin
            git reset --hard origin/${{ github.ref_name }} || {
              echo "Git reset failed, attempting alternative update method..."
              git stash || true
              git pull origin ${{ github.ref_name }} --rebase || git pull origin ${{ github.ref_name }}
            }

            # Clean up any untracked files
            git clean -fd || true

            # Install PHP dependencies (ignore platform requirements for PHP version)
            if [ "${{ steps.env.outputs.environment }}" == "production" ]; then
              composer install --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs
            else
              composer install --optimize-autoloader --no-interaction --ignore-platform-reqs
            fi

            # Ensure Bun is in PATH
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"

            # Install Node dependencies and build
            bun install
            bun run build

            # Run migrations
            php artisan migrate --force

            # Clear and cache config
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear

            if [ "${{ steps.env.outputs.environment }}" == "production" ]; then
              php artisan config:cache
              php artisan route:cache
              php artisan view:cache
            fi

            # Set permissions
            sudo chown -R www-data:www-data storage bootstrap/cache database
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod 775 database

            # Fix database permissions for SQLite files
            for dbfile in database/*.sqlite; do
              if [ -f "$dbfile" ]; then
                sudo chmod 664 "$dbfile"
                sudo chown www-data:www-data "$dbfile"
                echo "Fixed permissions for $dbfile"
              fi
            done

            # Restart services
            sudo systemctl reload php8.2-fpm
            sudo supervisorctl restart echohub-${{ steps.env.outputs.environment }}-worker:* || echo "Note: Worker restart skipped"

            echo "‚úÖ Deployment to ${{ steps.env.outputs.environment }} completed successfully!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Successfully deployed to ${{ steps.env.outputs.environment }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to ${{ steps.env.outputs.environment }} failed"
