name: Continuous Integration

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging, develop]

# Ensure only one workflow runs per PR/branch
concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'

jobs:
  # Job 1: PHP Tests with Database
  php-tests:
    name: PHP Tests (Pest)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: echohub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, dom, filter, gd, json, pgsql, bcmath, opcache
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Setup test environment
        run: |
          cp .env.example .env
          php artisan key:generate
          cat >> .env << EOF
          DB_CONNECTION=pgsql
          DB_HOST=127.0.0.1
          DB_PORT=5432
          DB_DATABASE=echohub_test
          DB_USERNAME=postgres
          DB_PASSWORD=postgres
          EOF

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run PHP tests with coverage
        run: |
          vendor/bin/pest --coverage --coverage-clover coverage.xml --colors=always

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage.xml
          flags: php
          name: php-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  # Job 2: Frontend Lint & Type Check (fast, no build needed)
  frontend-quality:
    name: Frontend Quality (Lint + Types)
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript check
        run: pnpm run types

      - name: Run Prettier check
        run: pnpm run format:check

  # Job 3: PHP Code Quality
  php-quality:
    name: PHP Quality (Pint)
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Run Pint (dry run)
        run: ./vendor/bin/pint --test

  # Job 4: Frontend Build & Tests
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP (for Wayfinder)
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies (for Wayfinder routes)
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Node dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend assets
        run: pnpm run build
        env:
          SKIP_WAYFINDER: '0'  # Generate routes during CI build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: public/build/
          retention-days: 1
          if-no-files-found: error

  # Job 5: Docker Image Build Validation
  docker-validation:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only, no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: echohub:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image health
        run: |
          docker run -d --name test-container \
            -e APP_KEY=base64:$(openssl rand -base64 32) \
            -e DB_CONNECTION=sqlite \
            -e DB_DATABASE=/tmp/test.sqlite \
            echohub:test

          # Wait for container to be healthy
          for i in {1..30}; do
            if docker exec test-container curl -sf http://localhost:8000/up >/dev/null 2>&1; then
              echo "Container health check passed"
              exit 0
            fi
            echo "Waiting for container... ($i/30)"
            sleep 2
          done

          echo "Container health check failed"
          docker logs test-container
          exit 1

  # Job 6: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Run npm audit
        run: |
          pnpm install --frozen-lockfile
          pnpm audit --audit-level=high
        continue-on-error: true

      - name: Check for known vulnerabilities in Composer
        uses: symfonycorp/security-checker-action@v5

  # Summary Job (required status check)
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-quality, php-quality, frontend-build, security]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.php-tests.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-quality.result }}" != "success" ]] || \
             [[ "${{ needs.php-quality.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-build.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully"
